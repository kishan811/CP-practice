	POSTORDER

vector<int> ans;
            stack<TreeNode*> s;
            s.push(root);
        while (!s.empty()) {
            root = s.top(); 
            s.pop();
            if (!root) 
                continue;
            ans.push_back(root->val);
            s.push(root->left);
            s.push(root->right);
        }
        return vector<int>(rbegin(ans), rend(ans));





-----------------------------------------------------------------------

	PREORDER

   vector<int> res;
            if (root == NULL) 
                return res;
         stack<TreeNode*> s;
        TreeNode* curr=root;
        s.push(curr);
        while (!s.empty()) {
            curr=s.top();
            s.pop();
            res.push_back(curr->val);

            if (curr->right)
                s.push(curr->right);
            if (curr->left) 
                s.push(curr->left);
        }
        return res;



------------------------------------------------------------------------------

	INORDER

	stack<TreeNode*> s;
TreeNode* x=root;
vector <int> ans;
while(true){
if(x){
s.push(x);
x=x->left;
}
else if(!s.empty()){
x=s.top();
ans.push_back(s.top()->val);
s.pop();
x=x->right;
}
    else 
        break;
   } 
  return ans; 
    }





        stack<TreeNode*> s;
        vector<int> ans;
        TreeNode* node = root;
        while(!s.empty() || node){
            while(node){
                s.push(node);
                node = node->left;
            }
            node = s.top();
            s.pop();
            ans.push_back(node->val);
            node = node->right;
        }


-------------------------------------------------------


		Sum of left leaves



int sum=0;
    void cal(TreeNode* root)
    {
        if(root==NULL)
        {
            return;
        }
        if(root->left&&root->left->left==NULL&&root->left->right==NULL)
        {
            sum=sum+root->left->val;
            if(root->right)
            {
                cal(root->right);
                return;
            }
        }
        cal(root->left);
        cal(root->right);
    }
    int sumOfLeftLeaves(TreeNode* root) {
        if(root==NULL)
        {
            return 0;
        }
        if(root->left==NULL&&root->right==NULL)
        {
            return 0;
        }
        cal(root);
        return sum;
    }
        return ans;



